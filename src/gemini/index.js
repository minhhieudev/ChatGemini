/*
 * Install the Generative AI SDK
 *
 * $ npm install @google/generative-ai
 *
 * See the getting started guide for more information
 * https://ai.google.dev/gemini-api/docs/get-started/node
 */

import {GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold} from "@google/generative-ai";
import DOMPurify from 'dompurify';
import { marked } from 'marked';
  
const apiKey = import.meta.env.VITE_GOOGLE_API_KEY;

// Simplify warning message
if (!apiKey) {
  console.warn("‚ö†Ô∏è VITE_GOOGLE_API_KEY is missing. Create a .env file with your Google API key.");
}

const genAI = new GoogleGenerativeAI(apiKey || "dummy-key");

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const safetySetting = [
  {
    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
];

// √Ånh x·∫° t·ª´ kh√≥a ƒë·∫øn emoji
const emojiMap = {
  'ch√†o': 'üëã',
  'hello': 'üëã',
  'hi': 'üëã',
  'xin ch√†o': 'üëã',
  'tuy·ªát v·ªùi': 'üéâ',
  'gi√∫p': 'üÜò',
  'gi√∫p ƒë·ª°': 'üÜò',
  'c·∫£m ∆°n': 'üôè',
  'thanks': 'üôè',
  'vui': 'üòä',
  'bu·ªìn': 'üò¢',
  'ƒë√∫ng': '‚úÖ',
  'sai': '‚ùå',
  'l∆∞u √Ω': 'üìù',
  'quan tr·ªçng': '‚ö†Ô∏è',
  '√Ω t∆∞·ªüng': 'üí°',
  'th√¥ng tin': '‚ÑπÔ∏è',
  'video': 'üé•',
  '√¢m nh·∫°c': 'üéµ',
  'ti·ªÅn': 'üí∞',
  'th·ªùi gian': '‚è∞',
  'ƒë·ªãa ƒëi·ªÉm': 'üìç',
  'email': 'üìß',
  'ƒëi·ªán tho·∫°i': 'üì±',
  'internet': 'üåê',
  'm√°y t√≠nh': 'üíª',
  'code': 'üë®‚Äçüíª',
  'l·∫≠p tr√¨nh': 'üë®‚Äçüíª',
  's√°ch': 'üìö',
  'h·ªçc': 'üìö',
  'gi√°o d·ª•c': 'üéì',
  'th√†nh c√¥ng': 'üèÜ',
  'th·∫•t b·∫°i': 'üòì',
  'nh√†': 'üè†',
  'gia ƒë√¨nh': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
  'tr√°i tim': '‚ù§Ô∏è',
  'y√™u': '‚ù§Ô∏è',
  'th√≠ch': 'üëç',
  'kh√¥ng th√≠ch': 'üëé',
  't√¨m ki·∫øm': 'üîç',
  'tr√≠ tu·ªá nh√¢n t·∫°o': 'ü§ñ',
  'AI': 'ü§ñ',
  'robot': 'ü§ñ',
  'python': 'üêç',
  'javascript': 'üü®',
  'react': '‚öõÔ∏è',
  'web': 'üåê',
  'd·ªØ li·ªáu': 'üìä',
  'b·∫£o m·∫≠t': 'üîí',
  'hacker': 'üë®‚Äçüíª',
  'virus': 'ü¶†',
  'ƒë√°m m√¢y': '‚òÅÔ∏è',
  'du l·ªãch': '‚úàÔ∏è',
  'th·ªùi ti·∫øt': 'üå§Ô∏è',
  'n√≥ng': 'üî•',
  'l·∫°nh': '‚ùÑÔ∏è',
  'm∆∞a': 'üåßÔ∏è',
  'n·∫Øng': '‚òÄÔ∏è',
  'ƒë·ªì ƒÉn': 'üçî',
  'th·ª©c ƒÉn': 'üç≤',
  'n∆∞·ªõc': 'üíß',
  'c√† ph√™': '‚òï',
  'b√°nh m√¨': 'üçû',
  'tr√°i c√¢y': 'üçé',
  'rau': 'ü•¶',
  'th·ªãt': 'ü•©',
  'c√°': 'üêü',
  'g√†': 'üçó',
  'pizza': 'üçï',
  'hamburger': 'üçî',
  'sushi': 'üç£',
  'b∆°': 'üßà',
  'kem': 'üç¶',
  'b√°nh': 'üç∞',
  's·ª©c kh·ªèe': 'üí™',
  'b·ªánh': 'ü§í',
  'thu·ªëc': 'üíä',
  'b√°c sƒ©': 'üë®‚Äç‚öïÔ∏è',
  'th·ªÉ thao': '‚öΩ',
  'b√≥ng ƒë√°': '‚öΩ',
  'b√≥ng r·ªï': 'üèÄ',
  'tennis': 'üéæ',
  'b∆°i l·ªôi': 'üèä‚Äç‚ôÇÔ∏è',
  'ch·∫°y b·ªô': 'üèÉ‚Äç‚ôÇÔ∏è',
  'yoga': 'üßò‚Äç‚ôÄÔ∏è',
  '√¢m nh·∫°c': 'üéµ',
  'guitar': 'üé∏',
  'piano': 'üéπ',
  'nh·∫°c': 'üéº',
  'ngh·ªá thu·∫≠t': 'üé®',
  'phim': 'üé¨',
  'game': 'üéÆ',
  'tr√≤ ch∆°i': 'üé≤',
  'c·ªù vua': '‚ôüÔ∏è',
  'poker': 'üÉè',
  'b√†i': 'üÉè',
  'sinh nh·∫≠t': 'üéÇ',
  'qu√†': 'üéÅ',
  'l·ªÖ h·ªôi': 'üéä',
  'gi√°ng sinh': 'üéÑ',
  'halloween': 'üéÉ',
  'nƒÉm m·ªõi': 'üéÜ',
  'ph√°o hoa': 'üéÜ',
  'ƒëi·ªán': '‚ö°',
  'pin': 'üîã',
  'b√∫t': '‚úèÔ∏è',
  'vi·∫øt': '‚úçÔ∏è',
  'ghi ch√∫': 'üìù',
  't√†i li·ªáu': 'üìÑ',
  'h·ªì s∆°': 'üìÅ',
  'doanh nghi·ªáp': 'üíº',
  'c√¥ng ty': 'üè¢',
  'b√°o c√°o': 'üìä',
  'bi·ªÉu ƒë·ªì': 'üìà',
  'gi·∫£m': 'üìâ',
  'tƒÉng': 'üìà',
  'chat': 'üí¨',
  'tin nh·∫Øn': 'üí¨',
  'th·∫Øc m·∫Øc': '‚ùì',
  'c√¢u h·ªèi': '‚ùì',
  'h·ªèi': '‚ùì',
  'tr·∫£ l·ªùi': 'üí¨',
};

// H√†m ƒë·ªÉ th√™m emoji v√†o vƒÉn b·∫£n
function addEmojisToText(text) {
  // Chuy·ªÉn ƒë·ªïi text th√†nh lowercase ƒë·ªÉ so s√°nh d·ªÖ d√†ng h∆°n
  const lowerText = text.toLowerCase();
  
  // T√¨m t·ª´ kh√≥a v√† th√™m emoji
  Object.keys(emojiMap).forEach(keyword => {
    if (lowerText.includes(keyword)) {
      // S·ª≠ d·ª•ng regex ƒë·ªÉ ch·ªâ thay th·∫ø t·ª´ kh√≥a ƒë·∫ßy ƒë·ªß, kh√¥ng ph·∫£i m·ªôt ph·∫ßn c·ªßa t·ª´ kh√°c
      const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
      text = text.replace(regex, (match) => `${match} ${emojiMap[keyword]}`);
    }
  });
  
  return text;
}

// H√†m ƒë·ªÉ c·∫£i thi·ªán ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
function enhanceTextFormatting(text) {
  // Th√™m ti√™u ƒë·ªÅ ƒë·∫≠m
  text = text.replace(/^([^#\r\n].+)(\r\n|\r|\n)/gm, '**$1**$2');
  
  // Th√™m g·∫°ch ch√¢n cho c√°c quan ƒëi·ªÉm quan tr·ªçng
  text = text.replace(/quan tr·ªçng:([^!.]*)/gi, '_**Quan tr·ªçng:$1**_');
  text = text.replace(/l∆∞u √Ω:([^!.]*)/gi, '_**L∆∞u √Ω:$1**_');
  
  // Th√™m danh s√°ch n·∫øu c√≥ s·ªë ƒë·∫ßu d√≤ng
  text = text.replace(/(\d+\.)([^\r\n]+)/g, '* $1$2');
  
  // Th√™m emoji v√†o vƒÉn b·∫£n
  text = addEmojisToText(text);
  
  // Chuy·ªÉn ƒë·ªïi markdown th√†nh HTML
  const htmlContent = marked(text);
  
  // L√†m s·∫°ch HTML ƒë·ªÉ tr√°nh XSS
  const cleanHtml = DOMPurify.sanitize(htmlContent);
  
  return cleanHtml;
}

async function run(textInput, chatHistory) {
  try {
    // Check if API key is set
    if (!apiKey) {
      console.error("API key is missing! Please set VITE_GOOGLE_API_KEY in your .env file");
      
      // Return a mock response for testing UI without API key
      return `<p><strong>This is a mock response since your API key is missing.</strong></p>
              <p>Your question was: "${textInput}"</p>
              <p>To fix this issue:</p>
              <ol>
                <li>Get a Google Gemini API key from https://makersuite.google.com/app/apikey</li>
                <li>Create a .env file in your project root</li>
                <li>Add the line: VITE_GOOGLE_API_KEY=your_api_key_here</li>
                <li>Restart your development server</li>
              </ol>`;
    }

    const chatSession = model.startChat({
      generationConfig,
      safetySetting,
      history: [],
    });

    try {
      const result = await chatSession.sendMessage(textInput);
      const rawText = result.response.text();
      
      // C·∫£i thi·ªán ƒë·ªãnh d·∫°ng v√† th√™m emoji
      const enhancedText = enhanceTextFormatting(rawText);
      
      return enhancedText;
    } catch (apiError) {
      console.error("Error calling Gemini API:", apiError);
      return `<p><strong>Error calling AI service: ${apiError.message}</strong></p>
              <p>Please check your API key and internet connection.</p>`;
    }
  } catch (error) {
    console.error("Fatal error in Gemini function:", error);
    return `<p><strong>Something went wrong: ${error.message}</strong></p>`;
  }
}

export default run;